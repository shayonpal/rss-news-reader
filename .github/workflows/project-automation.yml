name: RSS Reader Project Automation

on:
  issues:
    types: [opened, closed, reopened]

permissions:
  contents: read
  issues: write
  repository-projects: write

jobs:
  add_to_projects:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Add to RSS Reader Project
        uses: actions/add-to-project@main
        with:
          project-url: https://github.com/users/shayonpal/projects/7
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add to Project 5
        uses: actions/add-to-project@main
        with:
          project-url: https://github.com/users/shayonpal/projects/5
          github-token: ${{ secrets.GITHUB_TOKEN }}

  update_status:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Update project status on issue close
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_AUTOMATION_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            const projectId = "PVT_kwHOAaarJ84A6wgt";
            const statusFieldId = "PVTSSF_lAHOAaarJ84A6wgtzgvQhjk";

            // Determine target status based on labels
            const targetStatus = labels.includes('wontfix') ? {
              id: "0d38c2db",
              name: "Won't Do"
            } : {
              id: "98236657", 
              name: "Done"
            };

            console.log(`Moving issue #${issue.number} to ${targetStatus.name} column`);

            try {
              // First, find the project item for this issue
              const findItemQuery = `
                query FindProjectItem($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const findResult = await github.graphql(findItemQuery, {
                projectId: projectId
              });
              
              const projectItem = findResult.node.items.nodes.find(item => 
                item.content && item.content.number === issue.number
              );
              
              if (!projectItem) {
                console.log(`Project item not found for issue #${issue.number}`);
                return;
              }
              
              console.log(`Found project item: ${projectItem.id}`);
              
              // Update the project item status
              const updateMutation = `
                mutation UpdateProjectItem($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              const updateResult = await github.graphql(updateMutation, {
                projectId: projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: {
                  singleSelectOptionId: targetStatus.id
                }
              });
              
              console.log(`Successfully moved issue #${issue.number} to ${targetStatus.name}`);
              
            } catch (error) {
              console.error(`Error updating project status: ${error.message}`);
              // Don't fail the workflow, just log the error
            }

  update_status_reopened:
    runs-on: ubuntu-latest
    if: github.event.action == 'reopened'
    steps:
      - name: Move reopened issue back to Backlog
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_AUTOMATION_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const projectId = "PVT_kwHOAaarJ84A6wgt";
            const statusFieldId = "PVTSSF_lAHOAaarJ84A6wgtzgvQhjk";
            const backlogStatusId = "a0762461";

            console.log(`Moving reopened issue #${issue.number} back to Backlog`);

            try {
              // Find the project item for this issue
              const findItemQuery = `
                query FindProjectItem($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const findResult = await github.graphql(findItemQuery, {
                projectId: projectId
              });
              
              const projectItem = findResult.node.items.nodes.find(item => 
                item.content && item.content.number === issue.number
              );
              
              if (!projectItem) {
                console.log(`Project item not found for issue #${issue.number}`);
                return;
              }
              
              // Update the project item status back to Backlog
              const updateMutation = `
                mutation UpdateProjectItem($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId: projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: {
                  singleSelectOptionId: backlogStatusId
                }
              });
              
              console.log(`Successfully moved reopened issue #${issue.number} back to Backlog`);
              
            } catch (error) {
              console.error(`Error updating project status: ${error.message}`);
            }
